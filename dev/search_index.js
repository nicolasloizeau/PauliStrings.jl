var documenterSearchIndex = {"docs":
[{"location":"circuits/#Quantum-circuits","page":"Circuits","title":"Quantum circuits","text":"","category":"section"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"The module Circuits provides a way to construct and simulate circuits. Initialise an empty circuit with Circuit(n) where n is the number of qubits. Then, add gates to the circuit with push!(circuit, gate, qubits...) where gate is a string representing the gate and qubits are the qubits the gate acts on. For example, a CNOT gate with control qubit 1 and target qubit 2 is added to the circuit c with push!(c, \"CNOT\", 1, 2). Depolarizing noise can be added to the circuit with push!(c, \"Noise\"). The noise amplitude can be set with c.noise_amplitude=p.","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"Lets construct a CCX gate (Toffoli gate) out of CNOT and single qubit gates.","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"using PauliStrings\nusing PauliStrings.Circuits\n\nfunction noisy_toffoli()\n    c = Circuit(3)\n    push!(c, \"H\", 3)\n    push!(c, \"CNOT\", 2, 3); push!(c, \"Noise\")\n    push!(c, \"Tdg\", 3)\n    push!(c, \"CNOT\", 1, 3); push!(c, \"Noise\")\n    push!(c, \"T\", 3)\n    push!(c, \"CNOT\", 2, 3); push!(c, \"Noise\")\n    push!(c, \"Tdg\", 3)\n    push!(c, \"CNOT\", 1, 3); push!(c, \"Noise\")\n    push!(c, \"T\", 2)\n    push!(c, \"T\", 3)\n    push!(c, \"CNOT\", 1, 2); push!(c, \"Noise\")\n    push!(c, \"H\", 3)\n    push!(c, \"T\", 1)\n    push!(c, \"Tdg\", 2)\n    push!(c, \"CNOT\", 1, 2); push!(c, \"Noise\")\n    return c\nend","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"We can plot the circuit using QuantumCircuitDraw.jl:","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"using QuantumCircuitDraw\nc = noisy_toffoli()\npaulistrings_plot(c)","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"(Image: plot)","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"The circuit can be compiled to a unitary matrix with compile(c). Before compiling, set c.noise_amplitude to the desired noise amplitude and c.max_strings to the number of strings to keep at each step. Compile will multiply the gates in the circuit from left to right, apply the noise using add_noise and trim the operator at each step using trim.","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"Lets check our Toffoli gate against the built-in CCX gate in Circuits:","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"using PauliStrings.Circuits\nc = noisy_toffoli()\nc.noise_amplitude = 0\nU1 = compile(c)\nU2 = CCXGate(3,1,2,3)\nprintln(opnorm(U1-U2))","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"We can also compute expectation values of states in the computational basis with expect(c, state_out) and expect(c, state_in, state_out) . Let's compute the expectation values of the output states of the Toffoli gate when the input state is 111rangle:","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"in_state = \"111\"\nout_states = [\"000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\"]\np = [real(expect(c, in_state, out_state)) for out_state in out_states]\nusing Plots\nbar(out_states, p, legend=false, xlabel=\"out state\", ylabel=\"<out|U|in>\")","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"Same as above but seting the noise amplitude to 0.05:","category":"page"},{"location":"circuits/","page":"Circuits","title":"Circuits","text":"c.noise_amplitude = 0.05\np = [real(expect(c, in_state, out_state)) for out_state in out_states]\nbar(out_states, p, legend=false, xlabel=\"out state\", ylabel=\"<out|U|in>\")","category":"page"},{"location":"lanczos/#Lanczos","page":"Lanczos","title":"Lanczos","text":"","category":"section"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Here we show how to use PauliStrings.jl to run the recursion method and compute lanczos coefficients. We will focus on reproducing the X in XX results from figure 2 of Parker 2019.","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Start by importing PauliStrings:","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"using PauliStrings\nimport PauliStrings as ps","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Define the XX Hamiltonian H = sum_i X_iX_i+1+Y_iY_i+1 on a 1D chain with periodic boundary conditions","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"function XX(N)\n    H = ps.Operator(N)\n    for j in 1:(N - 1)\n        H += \"X\",j,\"X\",j+1\n        H += \"Z\",j,\"Z\",j+1\n    end\n    H += \"X\",1,\"X\",N\n    H += \"Z\",1,\"Z\",N\n    return H\nend","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"and the X operator sum_i=1^N X_i","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"function X(N)\n    H = ps.Operator(N)\n    for j in 1:N\n        H += \"X\",j\n    end\n    return H\nend","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Initialize a Hamiltonian and an operator:","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"N = 50 # system size\nH = XX(N) # Hamiltonian\nO = X(N) # operator","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Compute and plot the lanczos coefficients for different truncations. For each level of truncation, we keep only 2^p terms with the highest weight at each step of the lanczos algorithm.","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"ioff() # pyplot\n# nterms is the max pauli string length\nfor p in (14,16,18,20)\n    @time bs = ps.lanczos(H, O, 20, 2^p; keepnorm=true)\n    plot(bs, label=\"trim: 2^$p\")\nend\nlegend()\nylabel(L\"$b_n$\")\nxlabel(L\"$n$\")\ntitle(\"X in XX, N=$N spins\")\nsavefig(\"lanczos_example.png\")\nshow()","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"(Image: plot)","category":"page"},{"location":"lanczos/#Tacking-advantage-of-translation-symmetry","page":"Lanczos","title":"Tacking advantage of translation symmetry","text":"","category":"section"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"If the problem is 1D and has translation symmetry, we can take advantage of the symmetry to save time and memory. Just pass O and H as OperatorTS1D to  lanczos. For example :","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Hts = OperatorTS1D(H)\nOts = OperatorTS1D(O)\nbs = ps.lanczos(Hts, Ots, 20, 2^p; keepnorm=true)","category":"page"},{"location":"lanczos/","page":"Lanczos","title":"Lanczos","text":"Check the translation symmetry tutorial.","category":"page"},{"location":"docstrings_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docstrings_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"evolution/#Time-evolution","page":"Time evolution","title":"Time evolution","text":"","category":"section"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"Time evolution with PauliStrings.jl is done in the Heisenberg picture because pure states are rank 1 density matrices and low rank density matrices cannot be efficiently encoded as a sum of Pauli strings (Loizeau 2024).","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"The advantage of working with Pauli strings is that noisy systems can be efficiently simulated in this representation (Schuster 2024). Depolarizing noise makes long strings decay, so we can make the simulations tractable by combining noise with truncation.","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"Let's time evolve operator Z_1 in the chaotic spin chain","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"H = sum_i X_i X_i+1-105 Z_i +h_X X_i","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"First we construct the Hamiltonian:","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"using PauliStrings\nimport PauliStrings as ps","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"function chaotic_chain(N::Int)\n    H = ps.Operator(N)\n    # XX interactions\n    for j in 1:(N - 1)\n        H += \"X\",j,\"X\",j+1\n    end\n    H += \"X\",1,\"X\",N # close the chain\n    # fields\n    for j in 1:N\n        H += -1.05,\"Z\",j\n        H += 0.5,\"X\",j\n    end\n    return H\nend","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"We initialize a Hamiltonian and the Z_1 operator on a 32 spins system.","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"N = 32 # system size\nH = chaotic_chain(N) # Hamiltonian\nO = ps.Operator(N) # operator to time evolve\nO += \"Z\", 1 # Z on site 1","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"Now we write a function that will time evolve operator O under Hamiltonian H and return some observable. Here we are interested in recording the correlator","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"S(t) = frac12^N textTr Z_1(t)Z_1(0)","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"We will time evolve O by integrating Von Neuman's equation i fracdOdt=-HO with Runge-Kutta (rk4). At each time step we do 3 things :","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"Perform a rk4 step\nadd_noise that makes long strings decay\ntrim O by keeping only M strings with the largest weight","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"# heisenberg evolution of the operator O using rk4\n# return tr(O(0)*O(t))/tr(O(t)^2)\n# M is the number of strings to keep at each step\n# noise is the amplitude of depolarizing noise\nusing ProgressBars\n\nfunction evolve(H, O, M, times, noise)\n    echo = []\n    O0 = deepcopy(O)\n    dt = times[2]-times[1]\n    for t in ProgressBar(times)\n        push!(echo, ps.trace(O*ps.dagger(O0))/ps.trace(O0*O0))\n        # perform one step of rk4, keep only M strings, do not discard O0\n        O = ps.rk4(H, O, dt; heisenberg=true, M=M,  keep=O0)\n        # add depolarizing oise\n        O = ps.add_noise(O, noise*dt)\n        # keep the M strings with the largest weight. Do not discard O0\n        O = ps.trim(O, M; keep=O0)\n    end\n    return real.(echo)\nend","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"Now we can actually time evolve O for different trim values and plot the result:","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"# time evolve O for different trim values\ntimes = range(0, stop=5, step=0.05)\nnoise = 0.01\nfor trim in (10,12,14)\n    S = evolve(H, O, 2^trim, times, noise)\n    loglog(times, S) #plot S(t)\nend\n\nlegend()\ntitle(\"N=$N\")\nxlabel(\"t\")\nylabel(L\"tr$(Z_1(0)*Z_1(t))$\")\nsavefig(\"time_evolve_example.png\")\nshow()","category":"page"},{"location":"evolution/","page":"Time evolution","title":"Time evolution","text":"(Image: plot)","category":"page"},{"location":"translation/#translation","page":"Translation symmetry","title":"Translation symmetry in 1D with OperatorTS1D","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Here we will show how to take advantage of translation symmetry to save time and memory in PauliStrings.jl. Consider the 1D Ising Hamiltonian with periodic boundary conditions H=-J(sum_iZ_i Z_i+1 +g sum_i X_i). There is no need to actually store all the Pauli strings in this case. H is fully specified by just -JZ_1Z_2 and -Jg X_1 and the fact that it's translation symmetric.","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"In general, a 1D translation symmetric operator can be written as sum_i T_i H_0 where T_i is the i-sites translation operator and H_0 is the local operator that generates H. H_0 can be chosen so that it's only composed of Pauli strings that start on the first site.","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"In PauliStrings.jl, the structure OperatorTS1D lets you manipulate operators in this format. If your problem is 1D translation symmetric, OperatorTS1D will be much faster than Operator.","category":"page"},{"location":"translation/#Construction","page":"Translation symmetry","title":"Construction","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"There are two ways of constructing an OperatorTS1D :","category":"page"},{"location":"translation/#From-the-full-translation-symmetric-H","page":"Translation symmetry","title":"From the full translation symmetric H","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"First we construct the full Operator:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"function ising1D(N, J, g)\n    H = Operator(N)\n    for j in 1:(N - 1)\n        H += \"Z\",j,\"Z\",j+1\n    end\n    H += \"Z\",1,\"Z\",N #periodic boundary condition\n    for j in 1:N\n        H += g,\"X\",j\n    end\n    return -J*H\nend\nH = ising1D(N, J, g)","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"then convert it to an OperatorTS1D","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Hts = OperatorTS1D(H)","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"If H is not translation symmetric, then an error will be returned","category":"page"},{"location":"translation/#From-the-local-generator-H_0","page":"Translation symmetry","title":"From the local generator H_0","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Construct H_0 using Operator:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"H = Operator(N)\nH += -J, \"Z\",1,\"Z\",2\nH += -J*g,\"X\",1","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"then convert it to an OperatorTS1D","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Hts = OperatorTS1D(H, full=false)","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Note that here, we need to set full=false in order to specify that we are not passing the full Hamiltonian but just its local generator.","category":"page"},{"location":"translation/#Manipulation","page":"Translation symmetry","title":"Manipulation","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"All the operations defined on Operator are also defined on OperatorTS1D.","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Construct a simple translation invariant operator on 4 sites:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"H = Operator(N)\nH += \"X\", 1\nH += \"Z\", 1,\"Z\", 2\n\nHts = OperatorTS1D(H, full=false)\n\nprintln(H)\nprintln(Operator(Hts))","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"(1.0 + 0.0im) X111\n(1.0 + 0.0im) ZZ11\n\n(1.0 + 0.0im) 1ZZ1\n(1.0 + 0.0im) 1X11\n(1.0 + 0.0im) X111\n(1.0 + 0.0im) Z11Z\n(1.0 + 0.0im) 11ZZ\n(1.0 + 0.0im) 11X1\n(1.0 + 0.0im) ZZ11\n(1.0 + 0.0im) 111X","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Note that only the local generator is printed when printing OperatorTS1D, not the full operator.","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Multiplication:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"julia> Hts*Hts\n(1.0 + 0.0im) X1X1\n(2.0 + 0.0im) Z1Z1\n(2.0 + 0.0im) 1111\n(1.0 + 0.0im) ZZZZ\n(2.0 + 0.0im) XZZ1\n(2.0 + 0.0im) XX11\n(2.0 + 0.0im) ZZX1","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Addition:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"julia> Hts+Hts\n(2.0 + 0.0im) X111\n(2.0 + 0.0im) ZZ11","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"etc.","category":"page"},{"location":"translation/#Example:-computing-Tr(Hk)","page":"Translation symmetry","title":"Example: computing Tr(H^k)","text":"","category":"section"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"As an example of performance gains of using OperatorTS1D instead of Operator we compute the 8th moment (Tr(H^8)) of a 30 spin system.","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"Using the function defined above we construct a Ising Hamiltonian and convert it to an OperatorTS1D:","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"N = 30\nk = 8\nH = ising1D(N, 1)\nHts = OperatorTS1D(H)","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"then we compute the kth moment (trace_product) using both Operator and OperatorTS1D :","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"julia> @time println(trace_product(H, k))\n1.1904927790006272e18 + 0.0im\n 80.697013 seconds (28.91 k allocations: 111.213 MiB, 0.07% gc time, 0.04% compilation time)\n\njulia> @time println(trace_product(Hts, k))\n1.190492779000627e18 + 0.0im\n  1.951678 seconds (37.09 k allocations: 36.165 MiB, 2.00% gc time, 2.01% compilation time)","category":"page"},{"location":"translation/","page":"Translation symmetry","title":"Translation symmetry","text":"OperatorTS1D is 40 times faster in this case.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"(Image: Build Status) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#May-28-to-June-11-we-are-participating-in-Unitary-Hack-!-[Register-here](https://unitaryhack.dev/)-and-get-paid-to-close-issues.","page":"Getting started","title":"May 28 to June 11 we are participating in Unitary Hack ! Register here  and get paid to close issues.","text":"","category":"section"},{"location":"#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"PauliStrings.jl is a Julia package for many-body quantum mechanics with Pauli string represented as binary integers. It is particularly adapted for running Lanczos, time evolving noisy systems and simulating spin systems on arbitrary graphs. Paper : https://arxiv.org/abs/2410.09654","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"(Image: gif)","category":"page"},{"location":"#[Documentation](https://paulistrings.org/dev/)","page":"Getting started","title":"Documentation","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"The documentation is there : https://paulistrings.org","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"To build the docs :","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"julia docs/make.jl","category":"page"},{"location":"#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"You can install the package using Julia's package manager","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Pkg; Pkg.add(\"PauliStrings\")","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Or","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"] add PauliStrings","category":"page"},{"location":"#Initializing-an-operator","page":"Getting started","title":"Initializing an operator","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Import the library and initialize a operator of 4 qubits","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"import PauliStrings as ps\nH = ps.Operator(4)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Add a Pauli string to the operator","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H += \"XYZ1\"\nH += \"1YZY\"","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"julia> H\n(1.0 - 0.0im) XYZ1\n(1.0 - 0.0im) 1YZY","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Add a Pauli string with a coefficient","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H += -1.2, \"XXXZ\" # coefficient can be complex","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Add a 2-qubit string coupling qubits i and j with X and Y:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H += 2, \"X\", i, \"Y\", j # with a coefficient=2\nH += \"X\", i, \"Y\", j # with a coefficient=1","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Add a 1-qubit string:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H += 2, \"Z\", i # with a coefficient=2\nH += \"Z\", i # with a coefficient=1\nH += \"S+\", i","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Supported sites operators are X, Y, Z, Sx=X2, Sy=Y2, Sz=Z2, S+=(X+iY)2, S-=(X-iY)2.","category":"page"},{"location":"#Basic-Algebra","page":"Getting started","title":"Basic Algebra","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"The Operator type supports the +,-,* operators with other Operators and Numbers:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H3 = H1*H2\nH3 = H1+H2\nH3 = H1-H2\nH3 = H1+2 # adding a scalar is equivalent to adding the unit times the scalar\nH = 5*H # multiply operator by a scalar","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Trace : ps.trace(H)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Frobenius norm : ps.opnorm(H)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Conjugate transpose : ps.dagger(H)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Number of terms: length(H)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Commutator: ps.com(H1, H2). This is much faster than H1*H2-H2*H1","category":"page"},{"location":"#Print-and-export","page":"Getting started","title":"Print and export","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"print shows a list of terms with coefficients e.g:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"julia> println(H)\n(10.0 - 0.0im) 1ZZ\n(5.0 - 0.0im) 1Z1\n(15.0 + 0.0im) XYZ\n(5.0 + 0.0im) 1YY","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Export a list of strings with coefficients:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"coefs, strings = ps.op_to_strings(H)","category":"page"},{"location":"#Truncate,-Cutoff,-Trim,-Noise","page":"Getting started","title":"Truncate, Cutoff, Trim, Noise","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"ps.truncate(H,M) removes Pauli strings longer than M (returns a new Operator) ps.cutoff(H,c) removes Pauli strings with coefficient smaller than c in absolute value (returns a new Operator) ps.trim(H,N) keeps the first N trings with higest weight (returns a new Operator) ps.prune(H,alpha) keeps terms with probability 1-exp(-alpha*abs(c)) (returns a new Operator)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"ps.add_noise(H,g) adds depolarizing noise that make each strings decay like e^gw where w is the length of the string. This is useful when used with trim to keep the number of strings manageable during time evolution.","category":"page"},{"location":"#Time-evolution","page":"Getting started","title":"Time evolution","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"ps.rk4(H, O, dt; hbar=1, heisenberg=false) performs a step of Runge Kutta and returns the new updated O(t+dt)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H can be an Operator, or a function that takes a time and return an Operator. In case H is a function, a time also needs to be passed to rk4(H, O, dt, t). O is an Observable or a density matrix to time evolve. If evolving an observable in the Heisenberg picture, set heisenberg=true.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"An example is in time_evolve_example.jl. The following will time evolve O in the Heisenberg picture. At each step, we add depolarizing noise and trim the operator to keep the number of strings manageable","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"function evolve(H, O, M, times, noise)\n    dt = times[2]-times[1]\n    for t in times\n        O = ps.rk4(H, O, dt; heisenberg=true, M=M) # perform one step of rk4, keep only M strings\n        O = ps.add_noise(O, noise*dt) # add depolarizing noise\n        O = ps.trim(O, M) # keep the M strings with the largest weight\n    end\n    return O\nend","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Time evolution of the spin correlation function textupTr(Z_1(0)Z_1(t)) in the chaotic spin chain. Check timeevolveexample.jl to reproduce the plot. (Image: plot)","category":"page"},{"location":"#Lanczos","page":"Getting started","title":"Lanczos","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Compute lanczos coefficients","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"bs = ps.lanczos(H, O, steps, nterms)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"H : Hamiltonian","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"O : starting operator","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"nterms : maximum number of terms in the operator. Used by trim at every step","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Results for X in XX from https://journals.aps.org/prx/pdf/10.1103/PhysRevX.9.041017 :","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"(Image: plot)","category":"page"},{"location":"#Circuits","page":"Getting started","title":"Circuits","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"The module Circuits provides an easy way to construct and simulate circuits. Construct a Toffoli gate out elementary gates:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using PauliStrings\nusing PauliStrings.Circuits\n\nfunction noisy_toffoli()\n    c = Circuit(3)\n    push!(c, \"H\", 3)\n    push!(c, \"CNOT\", 2, 3); push!(c, \"Noise\")\n    push!(c, \"Tdg\", 3)\n    push!(c, \"CNOT\", 1, 3); push!(c, \"Noise\")\n    push!(c, \"T\", 3)\n    push!(c, \"CNOT\", 2, 3); push!(c, \"Noise\")\n    push!(c, \"Tdg\", 3)\n    push!(c, \"CNOT\", 1, 3); push!(c, \"Noise\")\n    push!(c, \"T\", 2)\n    push!(c, \"T\", 3)\n    push!(c, \"CNOT\", 1, 2); push!(c, \"Noise\")\n    push!(c, \"H\", 3)\n    push!(c, \"T\", 1)\n    push!(c, \"Tdg\", 2)\n    push!(c, \"CNOT\", 1, 2); push!(c, \"Noise\")\n    return c\nend","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"(Image: plot)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Compute the expectation value 110U111:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"c = noisy_toffoli()\nexpect(c, \"111\", \"110\")","category":"page"},{"location":"#Contributing,-Contact","page":"Getting started","title":"Contributing, Contact","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Contributions are welcome! Feel free to open a pull request if you'd like to contribute code or documentation. For bugs and feature requests, please open an issue. For questions, you can either contact nicolas.loizeau@nbi.ku.dk or start a new discussion in the repository.","category":"page"},{"location":"#Citation","page":"Getting started","title":"Citation","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"@Article{Loizeau2025,\n\ttitle={{Quantum many-body simulations with PauliStrings.jl}},\n\tauthor={Nicolas Loizeau and J. Clayton Peacock and Dries Sels},\n\tjournal={SciPost Phys. Codebases},\n\tpages={54},\n\tyear={2025},\n\tpublisher={SciPost},\n\tdoi={10.21468/SciPostPhysCodeb.54},\n\turl={https://scipost.org/10.21468/SciPostPhysCodeb.54},\n}\n\n@Article{Loizeau2025,\n\ttitle={{Codebase release 1.5 for PauliStrings.jl}},\n\tauthor={Nicolas Loizeau and J. Clayton Peacock and Dries Sels},\n\tjournal={SciPost Phys. Codebases},\n\tpages={54-r1.5},\n\tyear={2025},\n\tpublisher={SciPost},\n\tdoi={10.21468/SciPostPhysCodeb.54-r1.5},\n\turl={https://scipost.org/10.21468/SciPostPhysCodeb.54-r1.5},\n}","category":"page"},{"location":"constructing/#Constructing-operators","page":"Constructing operators","title":"Constructing operators","text":"","category":"section"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Start by importing PauliStrings:","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"using PauliStrings\nimport PauliStrings as ps","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"To construct an operator we first need to declare an empty operator of N qubits:","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"H = Operator(N)","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"PauliStrings.jl supports up to 128 qubits.","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"We can add a term of the form J X_i by doing","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"H += J, \"X\", i","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"and a term of the form J X_iX_j by doing","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"H += J, \"X\", i, \"X\", j","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Similarly, we add a term of the form J X_iX_jX_k by doing","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"H += J, \"X\", i, \"X\", j, \"X\", k","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"etc.","category":"page"},{"location":"constructing/#1D-transverse-Ising-model","page":"Constructing operators","title":"1D transverse Ising model","text":"","category":"section"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Let's construct the Hamiltonian of a 1D transverse Ising model H=-J(sum_ijZ_i Z_j +g sum_i X_i)","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"function ising1D(N, J, g)\n    H = Operator(N)\n    for j in 1:(N - 1)\n        H += \"Z\",j,\"Z\",j+1\n    end\n    H += \"Z\",1,\"Z\",N # periodic boundary condition\n    for j in 1:N\n        H += g,\"X\",j\n    end\n    return -J*H\nend","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Note that the first qubit starts at index 1, following Julia's 1-based index.","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Operators can be printed in strings format with the println function:","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"println(ising1D(3, 1, 0.5))","category":"page"},{"location":"constructing/#2D-transverse-Ising-model","page":"Constructing operators","title":"2D transverse Ising model","text":"","category":"section"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"Here we construct a 2D Ising model on a square lattice of L*L sites, with no periodic boundary conditions.","category":"page"},{"location":"constructing/","page":"Constructing operators","title":"Constructing operators","text":"function ising2D(L, J, g)\n    H = ps.Operator(L*L)\n    for x in 1:L-1\n        for y in 1:L\n            # convert x,y to qubit index\n            i = L*(y-1)+x\n            j = L*(y-1)+(x+1)\n            # horizontal interaction terms\n            H += ('Z',i,'Z',j)\n            # convert x,y to qubit index\n            i = L*(x-1)+y\n            j = L*x+y\n            # vertical interaction terms\n            H += ('Z',i,'Z',j)\n        end\n    end\n    for j in 1:L*L\n        H += g,\"X\",j\n    end\n    return -J*H\nend","category":"page"},{"location":"docstrings/#Documentation","page":"Docstrings","title":"Documentation","text":"","category":"section"},{"location":"docstrings/#Basics","page":"Docstrings","title":"Basics","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Operator(N::Int)\nOperatorTS1D(o::Operator; full=true)\nOperator(o::OperatorTS1D)","category":"page"},{"location":"docstrings/#PauliStrings.Operator-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.Operator","text":"Operator(N::Integer)\n\nInitialize a zero operator on N qubits.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.OperatorTS1D-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.OperatorTS1D","text":"OperatorTS1D(o::Operator; full=true)\n\nInitialize a 1D translation invariant operator from an Operator O=sum_i o_i O_i where O_i=T_i(O_0) and T_i is the i-sites translation operator. Set full=true if passing O, an Operator that is supported on the whole chain (i.e converting from a translation symmetric Operator) Set full=false if passing O_0,a local term o such that the full operator is O=sum_i o_i T_i(O_0)\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Operator-Tuple{OperatorTS1D}","page":"Docstrings","title":"PauliStrings.Operator","text":"Operator(o::OperatorTS1D)\n\nConvert an OperatorTS1D to an Operator\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Truncation-and-noise","page":"Docstrings","title":"Truncation and noise","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"add_noise(o::AbstractOperator, g::Real)\ntruncate(o::AbstractOperator, max_lenght::Int; keepnorm::Bool=false)\nk_local_part(o::AbstractOperator, k::Int; atmost=false)\ntrim(o::AbstractOperator, max_strings::Int; keepnorm::Bool=false, keep::Operator=Operator(0))\nprune(o::AbstractOperator, alpha::Real; keepnorm::Bool=false)\ncutoff(o::AbstractOperator, epsilon::Real; keepnorm::Bool=false)","category":"page"},{"location":"docstrings/#PauliStrings.add_noise-Tuple{AbstractOperator, Real}","page":"Docstrings","title":"PauliStrings.add_noise","text":"add_noise(o::Operator, g::Real)\n\nAdd depolarizing noise that make the long string decays. g is the noise amplitude.\n\nExample\n\nA = add_noise(A, 0.1)\n\nReference\n\nhttps://arxiv.org/pdf/2407.12768\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.truncate-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"Base.truncate","text":"truncate(o::Operator, max_lenght::Int; keepnorm::Bool = false)\n\nRemove all terms of length > maxlenght. Keep all terms of length <= maxlenght. i.e remove all M-local terms with M>max_lenght\n\nExample\n\nA = Operator(4)\nA += \"X\",1,\"X\",2\nA += \"Z\",1,\"Z\",2,\"Z\",4\n\njulia> A\n(1.0 + 0.0im) ZZ1Z\n(1.0 + 0.0im) XX11\n\njulia> ps.truncate(A,2)\n(1.0 + 0.0im) XX11\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.k_local_part-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"PauliStrings.k_local_part","text":"k_local_part(o::Operator, k::Int; atmost=false)\n\nReturn the k-local part of o. I.e all the strings of lenght k. Set atmost=true to return the 'at most' k-local part, i.e all the strings of length <= k.\n\nExample\n\nA = Operator(4)\nA += \"X\",1,\"X\",2\nA += \"Z\",1,\"Z\",2,\"Z\",4\nA += \"1X11\"\n\njulia> A\n(1.0 + 0.0im) ZZ1Z\n(1.0 + 0.0im) 1X11\n(1.0 + 0.0im) XX11\n\njulia> k_local_part(A,2)\n(1.0 + 0.0im) XX11\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trim-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"PauliStrings.trim","text":"trim(o::Operator, max_strings::Int; keepnorm::Bool = false, keep::Operator=Operator(N))\n\nKeep the first max_strings terms with largest coeficients.\n\nkeepnorm is set to true to keep the norm of o.\n\nkeep is an operator that specify a set of strings that cannot be removed\n\nExample\n\nA = Operator(4)\nA += 1,\"XXXX\"\nA += 2,\"XX11\"\nA += 3,\"XX1X\"\nA += 4,\"ZZXX\"\nB = Operator(4)\nB += 1,\"XX11\"\nB += 1,\"XX1X\"\n\njulia> trim(A,2)\n(4.0 + 0.0im) ZZXX\n(3.0 + 0.0im) XX1X\n\njulia> trim(A,2;keep=B)\n(4.0 + 0.0im) ZZXX\n(3.0 + 0.0im) XX1X\n(2.0 + 0.0im) XX11\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.prune-Tuple{AbstractOperator, Real}","page":"Docstrings","title":"PauliStrings.prune","text":" prune(o::Operator, alpha::Real; keepnorm::Bool = false)\n\nKeep terms with probability 1-exp(-alpha*abs(c)) where c is the weight of the term\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.cutoff-Tuple{AbstractOperator, Real}","page":"Docstrings","title":"PauliStrings.cutoff","text":"cutoff(o::Operator, epsilon::Real; keepnorm::Bool = false)\n\nRemove all terms with weight < epsilon\n\nExample\n\nA = Operator(4)\nA += 1,\"XXXX\"\nA += 2,\"XX11\"\nA += 3,\"XX1X\"\nA += 4,\"ZZXX\"\n\njulia> cutoff(A, 2.5)\n(3.0 + 0.0im) XX1X\n(4.0 + 0.0im) ZZXX\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Algorithms","page":"Docstrings","title":"Algorithms","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"rk4(H::AbstractOperator, O::AbstractOperator, dt::Real; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0))\nrk4(H::Function, O::AbstractOperator, dt::Real, t::Real; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0))\nrk4_lindblad(H::AbstractOperator, O::AbstractOperator, dt::Real, L; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0), gamma=[])\nlanczos(H::AbstractOperator, O::AbstractOperator, steps::Int, nterms::Int; keepnorm=true, maxlength=1000, returnOn=false, observer=false)","category":"page"},{"location":"docstrings/#PauliStrings.rk4-Tuple{AbstractOperator, AbstractOperator, Real}","page":"Docstrings","title":"PauliStrings.rk4","text":"rk4(H::AbstractOperator, O::AbstractOperator, dt::Real; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0))\n\nSingle step of Runge–Kutta-4 with time independant Hamiltonian. Returns O(t+dt). Set heisenberg=true for evolving an observable in the heisenberg picture. If heisenberg=false then it is assumed that O is a density matrix. M is the number of strings to keep.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rk4-Tuple{Function, AbstractOperator, Real, Real}","page":"Docstrings","title":"PauliStrings.rk4","text":"rk4(H::Function, O::AbstractOperator, dt::Real, t::Real; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0))\n\nSingle step of Runge–Kutta-4 with time dependant Hamiltonian. Returns O(t+dt). H is a function that takes a number (time) and returns an operator. Set heisenberg=true for evolving an observable in the heisenberg picture. If heisenberg=false then it is assumed that O is a density matrix. M is the number of strings to keep.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rk4_lindblad-Tuple{AbstractOperator, AbstractOperator, Real, Any}","page":"Docstrings","title":"PauliStrings.rk4_lindblad","text":"rk4_lindblad(H::AbstractOperator, O::AbstractOperator, dt::Real, L; hbar::Real=1, heisenberg=true, M=2^20, keep::Operator=Operator(0), gamma=[])\n\nSingle step of Runge–Kutta-4 for solving the Lindblad equation\n\ndotO=iHO+sum_i gamma_i left(L_i^dagger O L_i -frac12  L_i^dagger L_i O right)\n\nReturns O(t+dt). L is a list of jump operators. Set heisenberg=true for evolving an observable in the heisenberg picture. If heisenberg=false then it is assumed that O is a density matrix.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.lanczos-Tuple{AbstractOperator, AbstractOperator, Int64, Int64}","page":"Docstrings","title":"PauliStrings.lanczos","text":"lanczos(H::Operator, O::Operator, steps::Int, nterms::Int; keepnorm=true, maxlength=1000, returnOn=false)\nlanczos(H::OperatorTS1D, O::OperatorTS1D, steps::Int, nterms::Int; keepnorm=true, maxlength=1000, returnOn=false)\n\nCompute the first steps lanczos coeficients for Hamiltonian H and initial operator O\n\nAt every step, the operator is trimed with trim and only nterms are kept.\n\nUsing maxlength speeds up the commutator by only keeping terms of length <= maxlength\n\nSet returnOn=true to save the On's at each step. Then the function returns a pair of lists (bn, On). The first operators of the list On is O\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Operations","page":"Docstrings","title":"Operations","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Base.:+(o1::O, o2::O) where {O<:AbstractOperator}\nBase.:-(o1::O, o2::O) where {O<:AbstractOperator}\nBase.:*(o1::Operator, o2::Operator; kwargs...)\ncommutator(o1::Operator, o2::Operator; kwargs...)\nanticommutator(o1::Operator, o2::Operator; kwargs...)\nBase.:/(o::AbstractOperator, a::Number)\ncompress(o::AbstractOperator)\ntrace(o::Operator; normalize=false)\ndiag(o::AbstractOperator)\nopnorm(o::AbstractOperator; normalize=false)\ndagger(o::AbstractOperator)\nptrace(o::AbstractOperator, keep::Vector{Int})","category":"page"},{"location":"docstrings/#Base.:+-Union{Tuple{O}, Tuple{O, O}} where O<:AbstractOperator","page":"Docstrings","title":"Base.:+","text":"Base.:+(o1::O, o2::O) where {O<:AbstractOperator}\nBase.:+(o::AbstractOperator, a::Number)\nBase.:+(a::Number, o::AbstractOperator)\n\nAdd two operators together or add a number to an operator\n\nExample\n\nA = Operator(4)\nA += \"XYZ1\"\nA += 1, \"Y\", 4\nB = Operator(4)\nB += 2, \"Y\", 2, \"Y\", 4\nB += 1, \"Z\", 3\n\njulia> A\n(1.0 - 0.0im) 111Y\n(1.0 - 0.0im) XYZ1\n\njulia> B\n(1.0 + 0.0im) 11Z1\n(2.0 - 0.0im) 1Y1Y\n\njulia> A+B\n(1.0 + 0.0im) 11Z1\n(2.0 - 0.0im) 1Y1Y\n(1.0 - 0.0im) 111Y\n(1.0 - 0.0im) XYZ1\n\njulia> A+5\n(1.0 - 0.0im) 111Y\n(1.0 - 0.0im) XYZ1\n(5.0 + 0.0im) 1111\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.:--Union{Tuple{O}, Tuple{O, O}} where O<:AbstractOperator","page":"Docstrings","title":"Base.:-","text":"Base.:-(o1::O, o2::O) where {O<:AbstractOperator}\nBase.:-(o::AbstractOperator)\nBase.:-(o::AbstractOperator, a::Number)\nBase.:-(a::Number, o::AbstractOperator)\nBase.:-(o1::Operator, o2::Operator)\n\nSubtraction between operators and numbers\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.:*-Tuple{Operator, Operator}","page":"Docstrings","title":"Base.:*","text":"Base.:*(o1::Operator, o2::Operator; kwargs...)\nBase.:*(o::Operator, a::Number)\nBase.:*(o::OperatorTS1D, a::Number)\nBase.:*(a::Number, o::AbstractOperator)\n\nMultiply two operators together or an operator with a number\n\nExample\n\nA = Operator(4)\nA += \"XYZ1\"\nA += 1, \"Y\", 4\nB = Operator(4)\nB += 2, \"Y\", 2, \"Y\", 4\nB += 1, \"Z\", 3\n\njulia> A\n(1.0 - 0.0im) 111Y\n(1.0 - 0.0im) XYZ1\n\n\njulia> B\n(1.0 + 0.0im) 11Z1\n(2.0 - 0.0im) 1Y1Y\n\njulia> A*B\n(2.0 - 0.0im) X1ZY\n(1.0 - 0.0im) 11ZY\n(2.0 - 0.0im) 1Y11\n(1.0 - 0.0im) XY11\n\njulia> A*5\n(5.0 - 0.0im) 111Y\n(5.0 - 0.0im) XYZ1\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.commutator-Tuple{Operator, Operator}","page":"Docstrings","title":"PauliStrings.commutator","text":"commutator(o1::Operator, o2::Operator; kwargs...)\n\nCommutator of two operators. This is faster than doing o1*o2 - o2*o1.\n\nExample\n\njulia> A = Operator(4)\njulia> A += \"X111\"\njulia> B = Operator(4)\njulia> B += \"Z111\"\njulia> B += \"XYZ1\"\njulia> commutator(A,B)\n(0.0 - 2.0im) Y111\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.anticommutator-Tuple{Operator, Operator}","page":"Docstrings","title":"PauliStrings.anticommutator","text":"anticommutator(o1::Operator, o2::Operator; kwargs...)\n\nCommutator of two operators. This is faster than doing o1*o2 + o2*o1.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.:/-Tuple{AbstractOperator, Number}","page":"Docstrings","title":"Base.:/","text":"Base.:/(o::AbstractOperator, a::Number)\n\nDivide an operator by a number\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.compress-Tuple{AbstractOperator}","page":"Docstrings","title":"PauliStrings.compress","text":"compress(o::AbstractOperator)\n\nAccumulate repeated terms\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trace-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.trace","text":"trace(o::Operator; normalize=false)\ntrace(o::OperatorTS1D)\n\nTrace of an operator. If normalize is true, return the trace divided by 2^N.\n\nExample\n\njulia> A = Operator(4)\njulia> A += 2,\"1111\"\njulia> A += 3,\"XYZ1\"\njulia> trace(A)\n32.0 + 0.0im\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.diag-Tuple{AbstractOperator}","page":"Docstrings","title":"PauliStrings.diag","text":"diag(o::AbstractOperator)\n\nDiagonal of an operator. Keep the strings that only contain 1's or Z's. Return another operator.\n\nExample\n\njulia> A = Operator(4)\njulia> A += 2,\"1111\"\njulia> A += 3,\"XYZ1\"\njulia> A += 3,\"Z11Z\"\njulia> diag(A)\n(2.0 + 0.0im) 1111\n(3.0 + 0.0im) Z11Z\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.opnorm-Tuple{AbstractOperator}","page":"Docstrings","title":"PauliStrings.opnorm","text":"opnorm(o::AbstractOperator; normalize=false)\n\nFrobenius norm. If normalize is true, return the trace divided by sqrt(2^N).\n\nExample\n\njulia> A = Operator(4)\njulia> A += 2,\"X\",2\njulia> A += 1,\"Z\",1,\"Z\",3\njulia> opnorm(A)\n8.94427190999916\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.dagger-Tuple{AbstractOperator}","page":"Docstrings","title":"PauliStrings.dagger","text":"dagger(o::AbstractOperator)\n\nConjugate transpose. ' also works.\n\nExample\n\nA = Operator(3)\nA += 1im,\"X\",2\nA += 1,\"Z\",1,\"Z\",3\n\njulia> A\n\n(1.0 + 0.0im) Z1Z\n(0.0 + 1.0im) 1X1\n\n\njulia> dagger(A)\n(1.0 - 0.0im) Z1Z\n(0.0 - 1.0im) 1X1\n\njulia> A'\n(1.0 - 0.0im) Z1Z\n(0.0 - 1.0im) 1X1\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.ptrace-Tuple{AbstractOperator, Vector{Int64}}","page":"Docstrings","title":"PauliStrings.ptrace","text":"ptrace(o::AbstractOperator, keep::Vector{Int})\n\nPartial trace.\n\nkeep is list of qubits indices to keep starting at 1 note that this still returns an operator of size N and doesnt permute the qubits this only gets rid of Pauli strings that have no support on keep and add their coeficient*2^N to the identity string\n\nExample\n\nA = Operator(5)\nA += \"XY1XZ\"\nA += \"XY11Z\"\n\njulia> ptrace(A, [3,4])\n(1.0 - 0.0im) XY1XZ\n(8.0 - 0.0im) 11111\n\njulia> ptrace(A, [1,5])\n(1.0 - 0.0im) XY1XZ\n(1.0 - 0.0im) XY11Z\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Power-and-moments","page":"Docstrings","title":"Power and moments","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Base.:^(o::AbstractOperator, k::Int)\ntrace_product(o1::Operator, o2::Operator; scale=0)\ntrace_product(A::AbstractOperator, k::Int, B::AbstractOperator, l::Int; scale=0)\ntrace_product(A::AbstractOperator, k::Int; scale=0)\ntrace_product_z(o1::AbstractOperator, o2::AbstractOperator; scale=0)\nmoments(H::AbstractOperator, kmax::Int; start=1, scale=0)","category":"page"},{"location":"docstrings/#Base.:^-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"Base.:^","text":"Base.:^(o::Operator, k::Int)\n\nkth power of o. Same as oppow.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trace_product-Tuple{Operator, Operator}","page":"Docstrings","title":"PauliStrings.trace_product","text":"trace_product(o1::Operator, o2::Operator; scale=0)\ntrace_product(o1::OperatorTS1D, o2::OperatorTS1D; scale=0)\n\nEfficiently compute trace(o1*o2). This is much faster than doing trace(o1*o2). If scale is not 0, then the result is normalized such that trace(identity)=scale.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trace_product-Tuple{AbstractOperator, Int64, AbstractOperator, Int64}","page":"Docstrings","title":"PauliStrings.trace_product","text":"trace_product(A::Operator, k::Int, B::Operator, l::Int; scale=0)\ntrace_product(A::OperatorTS1D, k::Int, B::OperatorTS1D, l::Int; scale=0)\n\nEfficiently compute trace(A^k*B^l). This is much faster than doing trace(A^k*B^l).\n\nIf scale is not 0, then the result is normalized such that trace(identity)=scale.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trace_product-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"PauliStrings.trace_product","text":"trace_product(A::AbstractOperator, k::Int; scale=0)\n\nEfficiently compute trace(A^k). This is much faster than doing trace(A^k).\n\nIf scale is not 0, then the result is normalized such that trace(identity)=scale.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.trace_product_z-Tuple{AbstractOperator, AbstractOperator}","page":"Docstrings","title":"PauliStrings.trace_product_z","text":"trace_product_z(o1::AbstractOperator, o2::AbstractOperator; scale=0)\n\nEfficiently compute <0|o1*o2|0>. If scale is not 0, then the result is normalized such that trace(identity) = scale.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.moments-Tuple{AbstractOperator, Int64}","page":"Docstrings","title":"PauliStrings.moments","text":"moments(H::AbstractOperator, kmax::Int; start=1, scale=0)\n\nCompute the first kmax moments of H. start is the first moment to start from.\n\nIf scale is not 0, then the result is normalized such that trace(identity)=scale.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Random-operators","page":"Docstrings","title":"Random operators","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"rand_local1(N::Int)\nrand_local2(N::Int)\nrand_local1_TS1D(N::Int)\nrand_local2_TS1D(N::Int)","category":"page"},{"location":"docstrings/#PauliStrings.rand_local1-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.rand_local1","text":"rand_local2(N::Int)\n\nRandom 1-local operator\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rand_local2-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.rand_local2","text":"rand_local2(N::Int)\n\nRandom 2-local operator\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rand_local1_TS1D-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.rand_local1_TS1D","text":"rand_local1_TS1D(N::Int)\n\nRandom 1-local OperatorTS1D\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rand_local2_TS1D-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.rand_local2_TS1D","text":"rand_local2_TS1D(N::Int)\n\nRandom 2-local OperatorTS1D\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Construction","page":"Docstrings","title":"Construction","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Base.:+(o::Operator, args::Tuple{Number,Vararg{Any}})\nall_strings(N::Int)\nall_k_local(N::Int, k::Int)\nall_x(N::Int)\nall_y(N::Int)\nall_z(N::Int)\nset_coeffs(o::AbstractOperator, coeffs::Vector{T}) where {T<:Number}\nmajorana(N::Int, k::Int)","category":"page"},{"location":"docstrings/#Base.:+-Tuple{Operator, Tuple{Number, Vararg{Any, N} where N}}","page":"Docstrings","title":"Base.:+","text":"Base.:+(o::Operator, args::Tuple{Number, Vararg{Any}})\nBase.:+(o::Operator, args::Tuple{Vararg{Any}})\nBase.:+(o::Operator, term::Tuple{Number, String})\nBase.:+(o::Operator, term::String)\n\nMain functions to contruct spin operators. Identical signatures are available for -.\n\nExamples\n\nk-local terms can be added by adding a tuple to the operator. The first element of the tuple is an optional coefficient. The other element are couples (symbol,site) where symbol can be \"X\", \"Y\", \"Z\", \"Sx\", \"Sy\", \"Sz\", \"S+\", \"S-\" and site is an integer specifying the site on wich the symbol is acting.\n\nA = Operator(4)\nA += 2, \"X\",1,\"X\",2\nA += 3, \"Y\",1,\"X\",2\nA += \"X\",3,\"X\",4\nA += 4,\"Z\",3\nA += 5.2,\"X\",1,\"Y\",2,\"Z\",3\n\njulia> A\n(4.0 + 0.0im) 11Z1\n(3.0 - 0.0im) YX11\n(1.0 + 0.0im) 11XX\n(2.0 + 0.0im) XX11\n(5.2 - 0.0im) XYZ1\n\nFull strings can also be added:\n\nA = Operator(4)\nA += 2, \"1XXY\"\nA += 2im, \"11Z1\"\n\njulia> A\n(0.0 + 2.0im) 11Z1\n(2.0 - 0.0im) 1XXY\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.all_strings-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.all_strings","text":"all_strings(N::Int)\n\nReturn the sum of all the strings supported on N spins, with coeficients 1\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.all_k_local-Tuple{Int64, Int64}","page":"Docstrings","title":"PauliStrings.all_k_local","text":"all_k_local(N::Int, k::Int)\n\nReturn the sum of all the k-local strings supported on N spins, with coeficients 1. These are k-local only strings, not including strings shorter than k.\n\nExample\n\njulia> all_k_local(2, 1)\n(1.0 + 0.0im) X1\n(1.0 + 0.0im) 1X\n(1.0 + 0.0im) Z1\n(1.0 - 0.0im) Y1\n(1.0 + 0.0im) 1Z\n(1.0 - 0.0im) 1Y\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.all_x-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.all_x","text":"all_x(N::Int)\n\nReturn the sum of all the strings supported on N spins with only x and with coeficients 1\n\nExample\n\njulia> all_x(2)\n(1.0 + 0.0im) 11\n(1.0 + 0.0im) X1\n(1.0 + 0.0im) 1X\n(1.0 + 0.0im) XX\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.all_y-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.all_y","text":"all_y(N::Int)\n\nReturn the sum of all the strings supported on N spins with only y and with coeficients 1\n\nExample\n\njulia> all_y(2)\n(1.0 + 0.0im) 11\n(1.0 - 0.0im) Y1\n(1.0 - 0.0im) 1Y\n(1.0 - 0.0im) YY\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.all_z-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.all_z","text":"all_z(N::Int)\n\nReturn the sum of all the strings supported on N spins with only z and with coeficients 1\n\nExample\n\njulia> all_z(2)\n(1.0 + 0.0im) 11\n(1.0 + 0.0im) Z1\n(1.0 + 0.0im) 1Z\n(1.0 + 0.0im) ZZ\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.set_coeffs-Union{Tuple{T}, Tuple{AbstractOperator, Vector{T}}} where T<:Number","page":"Docstrings","title":"PauliStrings.set_coeffs","text":"set_coeffs(o::Operator, coefs::Vector{T}) where T <: Number\n\nSets the coefficient of o to coefs. Inplace.\n\nA = Operator(4)\nA += 2, \"1XXY\"\nA += 3, \"11Z1\"\n\njulia> A\n(3.0 + 0.0im) 11Z1\n(2.0 - 0.0im) 1XXY\njulia> set_coeffs(A, [5,6])\njulia> A\n(5.0 + 0.0im) 11Z1\n(6.0 - 0.0im) 1XXY\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.majorana-Tuple{Int64, Int64}","page":"Docstrings","title":"PauliStrings.majorana","text":"majorana(N::Int, k::Int)\n\nReturn the k-th Majorana operator on N spins. There are 2N Majoranas supported on N spins. They all anticomute :\n\ngamma_i gamma_j = 2delta_ij\n\nExample\n\njulia> majorana(4,1)\n(1.0 + 0.0im) X111\n\njulia> majorana(4,2)\n(1.0 - 0.0im) Y111\n\njulia> majorana(4,3)\n(1.0 + 0.0im) ZX11\n\njulia> majorana(4,4)\n(1.0 - 0.0im) ZY11\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#States","page":"Docstrings","title":"States","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"trace_zpart(o::Operator)\nexpect(o::Operator, state::String)\nexpect(o::Operator, in_state::String, out_state::String)\nexpect_product(o1::Operator, o2::Operator, state::String)","category":"page"},{"location":"docstrings/#PauliStrings.trace_zpart-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.trace_zpart","text":"trace_zpart(o::Operator)\n\nComputes <0|o|0>.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.expect-Tuple{Operator, String}","page":"Docstrings","title":"PauliStrings.expect","text":"expect(o::Operator, state::String)\n\nComputes the expectation value <state|o|state>. State is a single binary string that represents a pure state in the computational basis.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.expect-Tuple{Operator, String, String}","page":"Docstrings","title":"PauliStrings.expect","text":"expect(o::Operator, in_state::String, out_state::String)\n\nComputes the expectation value <out_state|o|in_state>. in_state and out_state are single binary strings that represents pure states in the computational basis.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.expect_product-Tuple{Operator, Operator, String}","page":"Docstrings","title":"PauliStrings.expect_product","text":"expect_product(o1::Operator, o2::Operator, state::String)\n\nComputes the expectation value <state|o1*o2|state>. State is a single binary string that represents a pure state in the computational basis.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Circuits","page":"Docstrings","title":"Circuits","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Circuit(N::Int; max_strings=2^30, noise_amplitude=0)\npush!(c::Circuit, gate::String, sites::Real...)\npushfirst!(c::Circuit, gate::String, sites::Real...)\nXGate(N::Int, i::Int)\nUGate(N::Int, i::Int, theta::Real, phi::Real, lam::Real)\nRXGate(N::Int, i::Int, theta::Real)\nPhaseGate(N::Int, i::Int, theta::Real)\nCPhaseGate(N::Int, i::Int, j::Int, theta::Real)\nCXGate(N::Int, i::Int, j::Int)\nSwapGate(N::Int, i::Int, j::Int)\nCSXGate(N::Int, i::Int, j::Int)\nCCXGate(N::Int, i::Int, j::Int, k::Int)\nMCZGate(N::Int, sites::Int...)\nXXPlusYYGate(N::Int, i::Int, j::Int, theta::Real, beta::Real)\ngrover_diffusion(N::Int, sites::Int...)\ncompile(c::Circuit)\nexpect(c::Circuit, state::String)\nexpect(c::Circuit, in_state::String, out_state::String)","category":"page"},{"location":"docstrings/#PauliStrings.Circuits.Circuit-Tuple{Int64}","page":"Docstrings","title":"PauliStrings.Circuits.Circuit","text":"Circuit(N::Int; max_strings=2^30, noise_amplitude=0)\n\nCreates an empty quantum circuit with N qubits. max_strings is the maximum number of strings to keep in the operator. noise_amplitude is the amplitude of the noise gate.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.push!-Tuple{Circuit, String, Vararg{Real, N} where N}","page":"Docstrings","title":"Base.push!","text":"push!(c::Circuit, gate::String, sites::Real...)\n\nAdds a gate to the circuit c. The gate is specified by a string gate and a list of sites sites. The gates have the same naming convention as in Qiskit. Allowed gates are: \"X\", \"Y\", \"Z\", \"H\", \"S\", \"T\", \"Tdg\", \"Phase\", \"CNOT\", \"Swap\", \"CX\", \"CY\", \"CZ\", \"CCX\", \"CSX\", \"CSXdg\", \"MCZ\", \"Noise\".\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.pushfirst!-Tuple{Circuit, String, Vararg{Real, N} where N}","page":"Docstrings","title":"Base.pushfirst!","text":"pushfirst!(c::Circuit, gate::String, sites::Real...)\n\nAdds a gate to the beginning of the circuit c.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.XGate-Tuple{Int64, Int64}","page":"Docstrings","title":"PauliStrings.Circuits.XGate","text":"XGate(N::Int, i::Int)\nYGate(N::Int, i::Int)\nZGate(N::Int, i::Int)\nHGate(N::Int, i::Int)\nSGate(N::Int, i::Int)\nTGate(N::Int, i::Int)\nTdgGate(N::Int, i::Int)\nSXGate(N::Int, i::Int)\n\nCreates a single qubit gate acting on qubit i of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.UGate-Tuple{Int64, Int64, Real, Real, Real}","page":"Docstrings","title":"PauliStrings.Circuits.UGate","text":"UGate(N::Int, i::Int, theta::Real, phi::Real, lam::Real)\n\nGeneral 1-qubit rotation of qubit i of a N qubit system with Euler angles theta, phi, lam of form\n\nU(theta phi lambda) =beginpmatrixcosleft(theta2right)  -e^ilambdasinleft(theta2right) e^iphisinleft(theta2right)  e^i(phi+lambda)cosleft(theta2right)endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.RXGate-Tuple{Int64, Int64, Real}","page":"Docstrings","title":"PauliStrings.Circuits.RXGate","text":"RXGate(N::Int, i::Int, phi::Real)\nRYGate(N::Int, i::Int, theta::Real)\nRZGate(N::Int, i::Int, phi::Real)\n\n1-qubit rotation of qubit i of a N qubit system around specific axis.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.PhaseGate-Tuple{Int64, Int64, Real}","page":"Docstrings","title":"PauliStrings.Circuits.PhaseGate","text":"PhaseGate(N::Int, i::Int, theta::Real)\n\nCreates a phase gate acting on qubit i of a N qubit system with phase theta.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.CPhaseGate-Tuple{Int64, Int64, Int64, Real}","page":"Docstrings","title":"PauliStrings.Circuits.CPhaseGate","text":"CPhaseGate(N::Int, i::Int, j::Int, theta::Real)\n\nControled phase gate with control qubit i and target qubit j of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.CXGate-Tuple{Int64, Int64, Int64}","page":"Docstrings","title":"PauliStrings.Circuits.CXGate","text":"CXGate(N::Int, i::Int, j::Int)\nCYGate(N::Int, i::Int, j::Int)\nCZGate(N::Int, i::Int, j::Int)\nCNOTGate(N::Int, i::Int, j::Int)\n\nCreates a two qubit gate with control qubit i and target qubit j of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.SwapGate-Tuple{Int64, Int64, Int64}","page":"Docstrings","title":"PauliStrings.Circuits.SwapGate","text":"SwapGate(N::Int, i::Int, j::Int)\n\nCreates a swap gate between qubits i and j of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.CSXGate-Tuple{Int64, Int64, Int64}","page":"Docstrings","title":"PauliStrings.Circuits.CSXGate","text":"CSXGate(N::Int, i::Int, j::Int)\nCSXdgGate(N::Int, i::Int, j::Int)\n\nControlled sqrt X gate and its dagger\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.CCXGate-NTuple{4, Int64}","page":"Docstrings","title":"PauliStrings.Circuits.CCXGate","text":"CCXGate(N::Int, i::Int, j::Int, k::Int)\n\nTofolli gate with control qubits i and j and target qubit k of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.MCZGate-Tuple{Int64, Vararg{Int64, N} where N}","page":"Docstrings","title":"PauliStrings.Circuits.MCZGate","text":"MCZGate(N::Int, sites::Int...)\n\nCreates a multi-controlled Z gate acting on sites qubits of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.XXPlusYYGate-Tuple{Int64, Int64, Int64, Real, Real}","page":"Docstrings","title":"PauliStrings.Circuits.XXPlusYYGate","text":"XXPlusYYGate(N::Int, i::Int, j::Int, theta::Real, beta::Real)\n\nXX+YY gate between qubits i and j of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.grover_diffusion-Tuple{Int64, Vararg{Int64, N} where N}","page":"Docstrings","title":"PauliStrings.Circuits.grover_diffusion","text":"grover_diffusion(N::Int, sites::Int...)\n\nCreates the Grover diffusion operator acting on sites qubits of a N qubit system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.Circuits.compile-Tuple{Circuit}","page":"Docstrings","title":"PauliStrings.Circuits.compile","text":"compile(c::Circuit)\n\nCompiles the quantum circuit c into a unitary operator. Applies the gates in the order they were added. Applies noise gates if present and trim the operator to c.max_strings strings at each step.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.expect-Tuple{Circuit, String}","page":"Docstrings","title":"PauliStrings.expect","text":"expect(c::Circuit, state::String)\n\nComputes the expectation value <state|c|0>. State is a single binary string that represents a pure state in the computational basis.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.expect-Tuple{Circuit, String, String}","page":"Docstrings","title":"PauliStrings.expect","text":"expect(c::Circuit, in_state::String, out_state::String)\n\nComputes the expectation value of the state out_state after applying the circuit c to the state in_state.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Other-tools","page":"Docstrings","title":"Other tools","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"compress(o::Operator)\nop_to_strings(o::Operator)\nget_coeffs(o::Operator)\nop_to_dense(o::Operator)\nshift_left(O::Operator)\nrotate(o::Operator, r::Int)\nxcount(p::PauliString)\nycount(p::PauliString)\nzcount(p::PauliString)\nis_ts(o::Operator)\nget_coeff(o::Operator{P}, p::P) where {P}\nget_pauli(o::Operator, i::Int)","category":"page"},{"location":"docstrings/#PauliStrings.compress-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.compress","text":"compress(o::AbstractOperator)\n\nAccumulate repeated terms\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.op_to_strings-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.op_to_strings","text":"op_to_strings(o::Operator)\n\ntakes an operator, return (coefs, strings) where coefs is a list of numbers and strings is a list of pauli string coefs[i] multiply strings[i]\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.get_coeffs-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.get_coeffs","text":"get_coeffs(o::Operator)\n\nReturn the list of coefficient in front of each strings.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.op_to_dense-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.op_to_dense","text":"op_to_dense(o::Operator)\n\nConvert an operator to a dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.shift_left-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.shift_left","text":"shift_left(O::Operator)\n\nShift evey string left so they start on site 1. This usefull for using translation symmetry in 1D systems\n\nExample\n\nA = Operator(4)\nA += \"XYZ1\"\nA += \"11ZZ\"\nA += \"1XZY\"\nA += \"ZZ11\"\n\njulia> shift_left(A)\n(1.0 - 0.0im) XZY1\n(1.0 - 0.0im) XYZ1\n(2.0 + 0.0im) ZZ11\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.rotate-Tuple{Operator, Int64}","page":"Docstrings","title":"PauliStrings.rotate","text":"rotate(o::Operator, r::Int)\n\nRotate (translate/shift) left the qubits of O by r\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.xcount-Tuple{PauliString}","page":"Docstrings","title":"PauliStrings.xcount","text":"xcount(p::PauliString)\n\nCount the number of X operators in a string.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.ycount-Tuple{PauliString}","page":"Docstrings","title":"PauliStrings.ycount","text":"ycount(p::PauliString)\n\nCount the number of Y operators in a string.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.zcount-Tuple{PauliString}","page":"Docstrings","title":"PauliStrings.zcount","text":"zcount(p::PauliString)\n\nCount the number of Z operators in a string.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.is_ts-Tuple{Operator}","page":"Docstrings","title":"PauliStrings.is_ts","text":"is_ts(o::Operator)\n\nreturn true if o is translation symmetric\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.get_coeff-Union{Tuple{P}, Tuple{Operator{P, T} where T<:Number, P}} where P","page":"Docstrings","title":"PauliStrings.get_coeff","text":"get_coeff(o::Operator{P}, p::P) where {P}\n\nReturn the coefficient of the string p in o.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#PauliStrings.get_pauli-Tuple{Operator, Int64}","page":"Docstrings","title":"PauliStrings.get_pauli","text":"get_pauli(o::Operator, i::Int)\n\nReturn an operator that represent the i-th pauli string of `o'. Does not return the string multiplied by the coefficient. Only the string.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Index","page":"Docstrings","title":"Index","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"","category":"page"}]
}
