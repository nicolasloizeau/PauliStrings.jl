using PauliStrings

# heisenberg evolution of the operator O using rk4
# return tr(O(0)*O(t))/tr(O(t)^2)
# M is the number of strings to keep at each step
# noise is the amplitude of depolarizing noise
function evolve(H, O, M, times, noise)
    echo = []
    O0 = deepcopy(O)
    dt = times[2] - times[1]
    for t in ProgressBar(times)
        push!(echo, ps.trace(O * ps.dagger(O0)) / ps.trace(O0 * O0))
        #preform one step of rk4, keep only M strings, do not discard O0
        O = ps.rk4(H, O, dt; heisenberg=true, M=M, keep=O0)
        #add depolarizingn oise
        O = ps.add_noise(O, noise * dt)
        # keep the M strings with the largest weight. Do not discard O0
        O = ps.trim(O, M; keep=O0)
    end
    return real.(echo)
end



function test_evolve_chaotic()
    N = 20 # system size
    H = chaotic_chain(N) #hamiltonian
    O = ps.Operator(N) #operator to time evolve
    O += "Z", 1 # Z on site 1
    times = range(0, stop=5, step=0.05)
    noise = 0.01
    S = evolve(H, O, 2^8, times, noise)
    return S[1:50]
end




function evolve_lindblad(H, L, O, M, times)
    echo = []
    O0 = deepcopy(O)
    dt = times[2] - times[1]
    for t in ProgressBar(times)
        push!(echo, trace(O * O0) / 2^qubitlength(O))
        O = rk4_lindblad(H, O, dt, L; heisenberg=true, M=M)
        O = trim(O, M)
    end
    return real.(echo)
end

function test_evolve_lindblad_xx()
    M = 2^12
    N = 4
    H = XX(N) #hamiltonian
    O = X(N) #operator to time evolve
    L = [Zi(N, i) * 0.5 for i in 1:N] # Lindblad jump operators
    times = 0:0.01:1
    S = evolve_lindblad(H, L, O, M, times)
    return S[1:50]
end

Scc = [1.0, 0.9883213329602607, 0.9550930571976582, 0.9025986628783946, 0.8343646080981653, 0.754821275495257, 0.6688880384346941, 0.5815297427745173, 0.4973335297112419, 0.42015036745588147, 0.3528357920729703, 0.29711065907341533, 0.2535481490620065, 0.22167833533039713, 0.2001730418054819, 0.18711060131125237, 0.18026617976370563, 0.17737469421104168, 0.17618163629715652, 0.1752450149846832, 0.17358504691328083, 0.1704487150106219, 0.1657488642187359, 0.15971794492626534, 0.15331876050183413, 0.14693100404620082, 0.14055466066549047, 0.13418971548292793, 0.12814677313832817, 0.12330347609025714, 0.11970704588515929, 0.11729166976734706, 0.11607204100185001, 0.11606015171794438, 0.11879465765738871, 0.12041726495821722, 0.12164932481482746, 0.12248833749674204, 0.12293278755406081, 0.12267406444644799, 0.12241588754682001, 0.1221582557812084, 0.12190387514113565, 0.12154257366929837, 0.12068696261717966, 0.11967018024910843, 0.11864235825043065, 0.11762562338247906, 0.11667371470082817, 0.11583246379845738]

Sxx = [4.0, 3.978458216770833, 3.9538680822096675, 3.9262876214432474, 3.895781582076981, 3.8624211458300173, 3.8262836088637027, 3.7874520333526998, 3.7460148730443037, 3.702065575720499, 3.655702165617993, 3.607026808973107, 3.55614536594055, 3.5031669321875207, 3.4482033734873996, 3.391368856630847, 3.3327793799370182, 3.2725523065847417, 3.21080590389395, 3.14765889157276, 3.083230001806879, 3.0176375539072002, 2.9509990460504247, 2.8834307664483503, 2.8150474260662395, 2.745961814781725, 2.676284482635318, 2.6061234475742134, 2.535583930835129, 2.4647681208518297, 2.3937749663112395, 2.322699998720968, 2.2516351845931, 2.1806688070964095, 2.109885376784007, 2.039365570767809, 1.9691861994871185, 1.8994202000077578, 1.8301366545922875, 1.7614008331022628, 1.6932742576315665, 1.625814787626654, 1.559076723625964, 1.4931109276474823, 1.4279649581709766, 1.3636832176000468, 1.3003071100489434, 1.237875207279984, 1.176423420619053, 1.115985176698605]

@testset "time_evolution" begin
    @test maximum((test_evolve_chaotic() - Scc) ./ Scc) < 1e-6
    @test maximum((test_evolve_lindblad_xx() - Sxx) ./ Sxx) < 1e-6
end
